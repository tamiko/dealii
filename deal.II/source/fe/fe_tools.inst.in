//---------------------------------------------------------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS; Vector : SERIAL_VECTORS)
  {
    namespace FETools
      \{
#if deal_II_dimension <= deal_II_space_dimension
      template
	void interpolate<deal_II_dimension,deal_II_space_dimension>
	(const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, const Vector &,
	 const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, Vector &);

      template
	void interpolate<deal_II_dimension,deal_II_space_dimension>
	(const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, const Vector &,
	 const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, const ConstraintMatrix &,
	 Vector &);
#endif
      \}
  }

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
    namespace FETools
      \{
#if deal_II_dimension <= deal_II_space_dimension
      template
	void compute_block_renumbering (
	  const FiniteElement<deal_II_dimension,deal_II_space_dimension>& ,
	  std::vector<types::global_dof_index>&, std::vector<types::global_dof_index>&, bool);

      template
	void compute_projection_matrices<deal_II_dimension, double, deal_II_space_dimension>
	(const FiniteElement<deal_II_dimension,deal_II_space_dimension> &,
	 std::vector<std::vector<FullMatrix<double> > >&, bool);

      template
	void compute_embedding_matrices<deal_II_dimension, double, deal_II_space_dimension>
	(const FiniteElement<deal_II_dimension,deal_II_space_dimension> &,
	 std::vector<std::vector<FullMatrix<double> > >&,bool);      
#endif
      \}
  }



//TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension, deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
    namespace FETools
      \{
#if deal_II_dimension == deal_II_space_dimension

      template class FEFactoryBase<deal_II_dimension>;

      template
	void compute_node_matrix(
	  FullMatrix<double>&,
	  const FiniteElement<deal_II_dimension>&);

      template
	void compute_component_wise(
	  const FiniteElement<deal_II_dimension>& ,
	  std::vector<unsigned int>&, std::vector<std::vector<unsigned int> >&);
      template
  
	void get_interpolation_matrix<deal_II_dimension>
	(const FiniteElement<deal_II_dimension> &,
	 const FiniteElement<deal_II_dimension> &,
	 FullMatrix<double> &);
      template
	void get_back_interpolation_matrix<deal_II_dimension>
	(const FiniteElement<deal_II_dimension> &,
	 const FiniteElement<deal_II_dimension> &,
	 FullMatrix<double> &);
      template
	void get_interpolation_difference_matrix<deal_II_dimension>
	(const FiniteElement<deal_II_dimension> &,
	 const FiniteElement<deal_II_dimension> &,
	 FullMatrix<double> &);
      template
	void get_interpolation_matrix<deal_II_dimension>
	(const FiniteElement<deal_II_dimension> &,
	 const FiniteElement<deal_II_dimension> &,
	 FullMatrix<float> &);
      template
	void get_back_interpolation_matrix<deal_II_dimension>
	(const FiniteElement<deal_II_dimension> &,
	 const FiniteElement<deal_II_dimension> &,
	 FullMatrix<float> &);
      template
	void get_interpolation_difference_matrix<deal_II_dimension>
	(const FiniteElement<deal_II_dimension> &,
	 const FiniteElement<deal_II_dimension> &,
	 FullMatrix<float> &);

      template
	void get_projection_matrix<deal_II_dimension>
	(const FiniteElement<deal_II_dimension> &,
	 const FiniteElement<deal_II_dimension> &,
	 FullMatrix<double> &);

      

      template
	void compute_face_embedding_matrices<deal_II_dimension,double>
	(const FiniteElement<deal_II_dimension> &, FullMatrix<double> (&)[GeometryInfo<deal_II_dimension>::max_children_per_face],
	 unsigned int, unsigned int);

      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<double> &,
	 const hp::DoFHandler<deal_II_dimension> &, Vector<double> &);
      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<double> &,
	 const hp::DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 Vector<double> &);
      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<float> &,
	 const hp::DoFHandler<deal_II_dimension> &, Vector<float> &);
      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<float> &,
	 const hp::DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 Vector<float> &);


      template FiniteElement<deal_II_dimension,deal_II_dimension> *
	get_fe_from_name<deal_II_dimension> (const std::string &);


      template
	void
	compute_projection_from_quadrature_points_matrix (const FiniteElement<deal_II_dimension> &,
							  const Quadrature<deal_II_dimension>    &,
							  const Quadrature<deal_II_dimension>    &,
							  FullMatrix<double>       &);

      template
	void
	compute_projection_from_quadrature_points(
	  const FullMatrix<double>                &,
	  const std::vector< Tensor<1, deal_II_dimension > >    &,
	  std::vector< Tensor<1, deal_II_dimension > >          &);

      template
	void
	compute_projection_from_quadrature_points(
	  const FullMatrix<double>                      &,
	  const std::vector<SymmetricTensor<2, deal_II_dimension> > &,
	  std::vector<SymmetricTensor<2, deal_II_dimension> >       &);


      template
	void
	compute_interpolation_to_quadrature_points_matrix (const FiniteElement<deal_II_dimension> &,
							   const Quadrature<deal_II_dimension>    &,
							   FullMatrix<double>       &);

#if deal_II_dimension != 1
      template
	void
	compute_projection_from_face_quadrature_points_matrix (const FiniteElement<deal_II_dimension> &,
							       const Quadrature<deal_II_dimension-1>    &,
							       const Quadrature<deal_II_dimension-1>    &,
							       const DoFHandler<deal_II_dimension>::active_cell_iterator & ,
							       unsigned int,
							       FullMatrix<double>       &);
#endif

      template
	void
	hierarchic_to_lexicographic_numbering<deal_II_dimension>
	(const FiniteElementData<deal_II_dimension> &,
	 std::vector<unsigned int> &);

      template
	void
	lexicographic_to_hierarchic_numbering<deal_II_dimension>
	(const FiniteElementData<deal_II_dimension> &,
	 std::vector<unsigned int> &);

      template
	std::vector<unsigned int>
	hierarchic_to_lexicographic_numbering<deal_II_dimension>
	(const FiniteElementData<deal_II_dimension> &);

      template
	std::vector<unsigned int>
	lexicographic_to_hierarchic_numbering<deal_II_dimension>
	(const FiniteElementData<deal_II_dimension> &);
  
#endif
      \}
  }



for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS; VEC : SERIAL_VECTORS)
  {
    namespace FETools
      \{
#if deal_II_dimension == deal_II_space_dimension
     template
	void back_interpolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const FiniteElement<deal_II_dimension> &, VEC &);
      template
	void back_interpolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 const VEC &,
	 const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 VEC &);
      template
	void interpolation_difference<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const FiniteElement<deal_II_dimension> &, VEC &);
      template
	void interpolation_difference<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 const VEC &,
	 const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 VEC &);
      template
	void project_dg<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const DoFHandler<deal_II_dimension> &, VEC &);
      template
	void extrapolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const DoFHandler<deal_II_dimension> &, VEC &);
      template
	void extrapolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 VEC &);
#endif
      \}
  }

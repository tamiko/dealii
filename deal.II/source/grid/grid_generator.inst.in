//---------------------------------------------------------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    template void
      GridGenerator::hyper_rectangle<deal_II_dimension, deal_II_space_dimension> (
	Triangulation<deal_II_dimension, deal_II_space_dimension> &,
	const Point<deal_II_space_dimension>&, const Point<deal_II_space_dimension>&,
	const bool);
    
    template void
      GridGenerator::colorize_hyper_rectangle<deal_II_dimension, deal_II_space_dimension> (
	Triangulation<deal_II_dimension, deal_II_space_dimension> &);
    
    template void
      GridGenerator::hyper_cube<deal_II_dimension, deal_II_space_dimension> (
	Triangulation<deal_II_dimension, deal_II_space_dimension> &, const double, const double);
    
    template
      void
      GridGenerator::merge_triangulations
      (const Triangulation<deal_II_dimension,deal_II_space_dimension> &triangulation_1,
       const Triangulation<deal_II_dimension,deal_II_space_dimension> &triangulation_2,
       Triangulation<deal_II_dimension,deal_II_space_dimension>       &result);
      
#endif
  }


for (deal_II_dimension : DIMENSIONS)
{
  
  template void
    GridGenerator::subdivided_hyper_cube<deal_II_dimension> (
      Triangulation<deal_II_dimension> &,
      const unsigned int, const double, const double);
  
  template void
    GridGenerator::subdivided_hyper_rectangle<deal_II_dimension>
    (Triangulation<deal_II_dimension> &,
     const std::vector<unsigned int>&,
     const Point<deal_II_dimension>&,
     const Point<deal_II_dimension>&,
     bool);
  
  template
    void
    GridGenerator::subdivided_hyper_rectangle(
      Triangulation<deal_II_dimension>              &,
      const std::vector<std::vector<double> > &,
      const Point<deal_II_dimension>                &,
      const Point<deal_II_dimension>                &,
      const bool                       );
  
    template void
      GridGenerator::parallelepiped<deal_II_dimension> (
	Triangulation<deal_II_dimension>&,
	const Point<deal_II_dimension> (&) [deal_II_dimension], 
	const bool);  
  
    template void
      GridGenerator::subdivided_parallelepiped<deal_II_dimension> (
	Triangulation<deal_II_dimension>&,
	const size_type,
	const Point<deal_II_dimension> (&) [deal_II_dimension], 
	const bool);  

    template void
      GridGenerator::subdivided_parallelepiped<deal_II_dimension> (
	Triangulation<deal_II_dimension>&,
	const size_type [deal_II_dimension], 
	const Point<deal_II_dimension> (&) [deal_II_dimension], 
	const bool);  
  
#if deal_II_dimension > 1
  template void
    GridGenerator::
    laplace_transformation<deal_II_dimension> (Triangulation<deal_II_dimension> &,
					       const std::map<types::global_dof_index,Point<deal_II_dimension> > &);
#endif
  
  
 }


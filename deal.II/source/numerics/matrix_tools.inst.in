//---------------------------------------------------------------------------
//    $Id$
//    Version: $Name$
//
//    Copyright (C) 2010, 2012 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------
for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension

// non-hp version of create_mass_matrix
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_space_dimension>
      (const Mapping<deal_II_dimension,deal_II_space_dimension>       &mapping,
       const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_space_dimension>
      (const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_space_dimension>
      (const Mapping<deal_II_dimension,deal_II_space_dimension>       &mapping,
       const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_space_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,double,deal_II_space_dimension>
      (const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_space_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);


    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_space_dimension>
      (const Mapping<deal_II_dimension,deal_II_space_dimension>       &mapping,
       const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_space_dimension>
      (const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_space_dimension>
      (const Mapping<deal_II_dimension,deal_II_space_dimension>       &mapping,
       const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_space_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension,float,deal_II_space_dimension>
      (const DoFHandler<deal_II_dimension,deal_II_space_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_space_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_space_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);

    template
      void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension,deal_II_space_dimension>
      (const DoFHandler<deal_II_dimension,deal_II_space_dimension>     &dof,
       const Quadrature<deal_II_dimension-1>   &q,
       SparseMatrix<double>      &matrix,
       const FunctionMap<deal_II_space_dimension>::type &rhs,
       Vector<double>            &rhs_vector,
       std::vector<types::global_dof_index> &dof_to_boundary_mapping,
       const Function<deal_II_space_dimension> * const a,
       std::vector<unsigned int>);

    template
      void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension,deal_II_space_dimension>
      (const Mapping<deal_II_dimension,deal_II_space_dimension> &,
       const DoFHandler<deal_II_dimension,deal_II_space_dimension>     &dof,
       const Quadrature<deal_II_dimension-1>   &q,
       SparseMatrix<double>      &matrix,
       const FunctionMap<deal_II_space_dimension>::type &rhs,
       Vector<double>            &rhs_vector,
       std::vector<types::global_dof_index> &dof_to_boundary_mapping,
       const Function<deal_II_space_dimension> * const a,
       std::vector<unsigned int>);




#endif
  }


//TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension, deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension == deal_II_space_dimension

// hp versions of functions
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::MappingCollection<deal_II_dimension>       &mapping,
       const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::MappingCollection<deal_II_dimension>       &mapping,
       const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);


    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::MappingCollection<deal_II_dimension>       &mapping,
       const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::MappingCollection<deal_II_dimension>       &mapping,
       const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_mass_matrix<deal_II_dimension>
      (const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<float>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);


#if deal_II_dimension != 1



    template
      void
      MatrixCreator::create_boundary_mass_matrix<deal_II_dimension>
      (const hp::MappingCollection<deal_II_dimension>&,
       const hp::DoFHandler<deal_II_dimension>&,
       const hp::QCollection<deal_II_dimension-1>&,
       SparseMatrix<double>&,
       const FunctionMap<deal_II_dimension>::type&,
       Vector<double>&,
       std::vector<types::global_dof_index>&,
       const Function<deal_II_dimension> * const,
       std::vector<unsigned int>);

    template
      void MatrixCreator::create_boundary_mass_matrix<deal_II_dimension>
      (const hp::DoFHandler<deal_II_dimension>&,
       const hp::QCollection<deal_II_dimension-1>&,
       SparseMatrix<double>&,
       const FunctionMap<deal_II_dimension>::type&,
       Vector<double>&,
       std::vector<types::global_dof_index>&,
       const Function<deal_II_dimension> * const,
       std::vector<unsigned int>);

#endif


// non-hp versions of create_laplace_matrix
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const DoFHandler<deal_II_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const Mapping<deal_II_dimension>       &mapping,
       const DoFHandler<deal_II_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const Mapping<deal_II_dimension>       &mapping,
       const DoFHandler<deal_II_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const DoFHandler<deal_II_dimension>    &dof,
       const Quadrature<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);

// hp versions of create_laplace_matrix
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const hp::MappingCollection<deal_II_dimension>       &mapping,
       const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const hp::MappingCollection<deal_II_dimension>       &mapping,
       const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);
    template
      void MatrixCreator::create_laplace_matrix<deal_II_dimension>
      (const hp::DoFHandler<deal_II_dimension>    &dof,
       const hp::QCollection<deal_II_dimension>    &q,
       SparseMatrix<double>     &matrix,
       const Function<deal_II_dimension>      &rhs,
       Vector<double>           &rhs_vector,
       const Function<deal_II_dimension> * const coefficient,
       const ConstraintMatrix   &constraints);



#endif
  }


//---------------------------------------------------------------------------
//    $Id$
//
//    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2011, 2012 by the deal.II authors
//
//    This file is subject to QPL and may not be  distributed
//    without copyright and license information. Please refer
//    to the file deal.II/doc/license.html for the  text  and
//    further information on this license.
//
//---------------------------------------------------------------------------

for (VEC : SERIAL_VECTORS ; deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools \{

      template
        void integrate_difference<deal_II_dimension, VEC, Vector<float>, deal_II_space_dimension>
        (const DoFHandler<deal_II_dimension, deal_II_space_dimension>&,
         const VEC&,
         const Function<deal_II_space_dimension>&,
         Vector<float>&,
         const Quadrature<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_space_dimension>*,
         const double);

      template
        void integrate_difference<deal_II_dimension, VEC, Vector<double>, deal_II_space_dimension >
        (const DoFHandler<deal_II_dimension, deal_II_space_dimension>&,
         const VEC&,
         const Function<deal_II_space_dimension>&,
         Vector<double>&,
         const Quadrature<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_space_dimension>*,
         const double);

      template
        void integrate_difference<deal_II_dimension, VEC, Vector<float>, deal_II_space_dimension>
        (const Mapping<deal_II_dimension, deal_II_space_dimension>&,
         const DoFHandler<deal_II_dimension, deal_II_space_dimension>&,
         const VEC&,
         const Function<deal_II_space_dimension>&,
         Vector<float>&,
         const Quadrature<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_space_dimension>*,
         const double);

      template
        void integrate_difference<deal_II_dimension, VEC, Vector<double>, deal_II_space_dimension >
        (const Mapping<deal_II_dimension, deal_II_space_dimension>&,
         const DoFHandler<deal_II_dimension, deal_II_space_dimension>&,
         const VEC&,
         const Function<deal_II_space_dimension>&,
         Vector<double>&,
         const Quadrature<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_space_dimension>*,
         const double);



      template
        double compute_mean_value<deal_II_dimension>
        (const Mapping<deal_II_dimension,deal_II_space_dimension>&,
         const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const Quadrature<deal_II_dimension>&,
         const VEC&,
         const unsigned int);

      template
        double compute_mean_value<deal_II_dimension>
        (const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const Quadrature<deal_II_dimension>&,
         const VEC&,
         const unsigned int);

      template
        void interpolate
        (const Mapping<deal_II_dimension,deal_II_space_dimension>&,
         const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const Function<deal_II_space_dimension>&,
         VEC&);

      template
        void interpolate
        (const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const Function<deal_II_space_dimension>&,
         VEC&);

      template
        void project
        (const Mapping<deal_II_dimension,deal_II_space_dimension>      &,
         const DoFHandler<deal_II_dimension,deal_II_space_dimension>   &,
         const ConstraintMatrix                &,
         const Quadrature<deal_II_dimension>   &,
         const Function<deal_II_space_dimension>     &,
         VEC                                   &,
         const bool,
         const Quadrature<deal_II_dimension-1> &,
         const bool);

      template
        void project
        (const DoFHandler<deal_II_dimension,deal_II_space_dimension>   &,
         const ConstraintMatrix                &,
         const Quadrature<deal_II_dimension>   &,
         const Function<deal_II_space_dimension>     &,
         VEC                                   &,
         const bool,
         const Quadrature<deal_II_dimension-1> &,
         const bool);
      \}
#endif
  }



//TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension, deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (VEC : SERIAL_VECTORS ; deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension == deal_II_space_dimension

    namespace VectorTools \{

  template
    void point_value<deal_II_dimension> (
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&,
      Vector<double>&);

      template
        void interpolate
        (const Mapping<deal_II_dimension>&,
         const hp::DoFHandler<deal_II_dimension>&,
         const Function<deal_II_dimension>&,
         VEC&);
      template
        void interpolate
        (const hp::DoFHandler<deal_II_dimension>&,
         const Function<deal_II_dimension>&,
         VEC&);

  template
    double point_value<deal_II_dimension> (
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&);

  template
    void point_value<deal_II_dimension> (
      const hp::MappingCollection<deal_II_dimension>&,
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&,
      Vector<double>&);

      template
        void interpolate
        (const DoFHandler<deal_II_dimension>&,
         const DoFHandler<deal_II_dimension>&,
         const FullMatrix<double>&,
         const VEC&,
         VEC&);

  template
    double point_value<deal_II_dimension> (
      const hp::MappingCollection<deal_II_dimension>&,
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&);

      template
        void integrate_difference<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension>&,
         const VEC&,
         const Function<deal_II_dimension>&,
         Vector<double>&,
         const hp::QCollection<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_dimension>*,
         const double);
      template
        void integrate_difference<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension>&,
         const VEC&,
         const Function<deal_II_dimension>&,
         Vector<float>&,
         const hp::QCollection<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_dimension>*,
         const double);
      template
        void integrate_difference<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>&,
         const hp::DoFHandler<deal_II_dimension>&,
         const VEC&,
         const Function<deal_II_dimension>&,
         Vector<double>&,
         const hp::QCollection<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_dimension>*,
         const double);
      template
        void integrate_difference<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>&,
         const hp::DoFHandler<deal_II_dimension>&,
         const VEC&,
         const Function<deal_II_dimension>&,
         Vector<float>&,
         const hp::QCollection<deal_II_dimension>&,
         const NormType&,
         const Function<deal_II_dimension>*,
         const double);

      template
        void point_difference<deal_II_dimension> (
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Function<deal_II_dimension>&,
          Vector<double>&,
          const Point<deal_II_dimension>&);

      template
        void point_difference<deal_II_dimension> (
          const Mapping<deal_II_dimension>&,
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Function<deal_II_dimension>&,
          Vector<double>&,
          const Point<deal_II_dimension>&);

      template
        void point_value<deal_II_dimension> (
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&,
          Vector<double>&);

      template
        double point_value<deal_II_dimension> (
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&);

      template
        void point_value<deal_II_dimension> (
          const Mapping<deal_II_dimension>&,
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&,
          Vector<double>&);

      template
        double point_value<deal_II_dimension> (
          const Mapping<deal_II_dimension>&,
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&);

      \}
#endif
  }


for (VEC : SERIAL_VECTORS)
{
    namespace VectorTools \{
      template
        void subtract_mean_value(VEC &, const std::vector<bool> &);
    \}
}


for (deal_II_dimension : DIMENSIONS)
{
    namespace VectorTools \{
      template
        void interpolate_boundary_values (
          const MGDoFHandler<deal_II_dimension> &,
          const types::boundary_id,
          const Function<deal_II_dimension>   &,
	  ConstraintMatrix&,
          const ComponentMask    &);

      template
        void interpolate_boundary_values (
          const MGDoFHandler<deal_II_dimension> &,
          const types::boundary_id,
          const Function<deal_II_dimension>   &,
          std::map<types::global_dof_index,double>       &,
          const ComponentMask    &);
    \}
}


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS; DH : DOFHANDLER_TEMPLATES)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools \{
      template
        void interpolate_boundary_values
        (const Mapping<deal_II_dimension,deal_II_space_dimension>    &,
         const DH<deal_II_dimension,deal_II_space_dimension> &,
         const FunctionMap<deal_II_space_dimension>::type &,
         std::map<types::global_dof_index,double>       &,
         const ComponentMask    &);

      template
        void interpolate_boundary_values
        (const Mapping<deal_II_dimension,deal_II_space_dimension>    &,
         const DH<deal_II_dimension,deal_II_space_dimension> &,
         const types::boundary_id,
         const Function<deal_II_space_dimension>   &,
         std::map<types::global_dof_index,double>       &,
         const ComponentMask    &);

      template
        void interpolate_boundary_values (
          const DH<deal_II_dimension,deal_II_space_dimension> &,
          const types::boundary_id,
          const Function<deal_II_space_dimension>   &,
          std::map<types::global_dof_index,double>       &,
          const ComponentMask    &);

      template
        void interpolate_boundary_values
        (const DH<deal_II_dimension,deal_II_space_dimension> &,
         const FunctionMap<deal_II_space_dimension>::type &,
         std::map<types::global_dof_index,double>       &,
         const ComponentMask    &);

      template
        void interpolate_boundary_values (
          const Mapping<deal_II_dimension,deal_II_space_dimension>    &,
          const DH<deal_II_dimension,deal_II_space_dimension> &,
          const FunctionMap<deal_II_space_dimension>::type   &,
          ConstraintMatrix                    &,
          const ComponentMask    &);

      template
        void interpolate_boundary_values
        (const Mapping<deal_II_dimension,deal_II_space_dimension>    &,
         const DH<deal_II_dimension,deal_II_space_dimension> &,
         const types::boundary_id,
         const Function<deal_II_space_dimension>   &,
         ConstraintMatrix                    &,
         const ComponentMask             &);

      template
        void interpolate_boundary_values (
          const DH<deal_II_dimension,deal_II_space_dimension> &,
          const types::boundary_id,
          const Function<deal_II_space_dimension>   &,
          ConstraintMatrix                    &,
          const ComponentMask    &);

      template
        void interpolate_boundary_values (
          const DH<deal_II_dimension,deal_II_space_dimension> &,
          const FunctionMap<deal_II_space_dimension>::type   &,
          ConstraintMatrix                    &,
          const ComponentMask    &);

      \}
#endif
  }


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools \{
      template
        void create_right_hand_side<deal_II_dimension,deal_II_space_dimension>
        (const Mapping<deal_II_dimension,deal_II_space_dimension>    &,
         const DoFHandler<deal_II_dimension,deal_II_space_dimension> &,
         const Quadrature<deal_II_dimension> &,
         const Function<deal_II_space_dimension>   &,
         Vector<double>                      &);

      template
        void create_right_hand_side<deal_II_dimension,deal_II_space_dimension>
        (const DoFHandler<deal_II_dimension,deal_II_space_dimension> &,
         const Quadrature<deal_II_dimension> &,
         const Function<deal_II_space_dimension>   &,
         Vector<double>  &);

      \}
#endif
  }

//TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension, deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension == deal_II_space_dimension
    namespace VectorTools \{
      template
        void create_right_hand_side<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>    &,
         const hp::DoFHandler<deal_II_dimension> &,
         const hp::QCollection<deal_II_dimension> &,
         const Function<deal_II_dimension>   &,
         Vector<double>                      &);

      template
        void create_right_hand_side<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension> &,
         const hp::QCollection<deal_II_dimension> &,
         const Function<deal_II_dimension>   &,
         Vector<double>                      &);

      template
        void create_point_source_vector<deal_II_dimension>
        (const Mapping<deal_II_dimension>    &,
         const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);

      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>    &,
         const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const Mapping<deal_II_dimension>    &,
         const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);

      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>    &,
         const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);

#if deal_II_dimension > 1
      template
        void
        create_boundary_right_hand_side<deal_II_dimension>
        (const Mapping<deal_II_dimension>    &,
         const DoFHandler<deal_II_dimension> &,
         const Quadrature<deal_II_dimension-1> &,
         const Function<deal_II_dimension>   &,
         Vector<double>                      &,
         const std::set<types::boundary_id> &);
#endif

      template
        void
        create_boundary_right_hand_side<deal_II_dimension>
        (const DoFHandler<deal_II_dimension> &,
         const Quadrature<deal_II_dimension-1> &,
         const Function<deal_II_dimension>   &,
         Vector<double>                      &,
         const std::set<types::boundary_id> &);

#if deal_II_dimension > 1
      template
        void
        create_boundary_right_hand_side<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>    &,
         const hp::DoFHandler<deal_II_dimension> &,
         const hp::QCollection<deal_II_dimension-1> &,
         const Function<deal_II_dimension>   &,
         Vector<double>                      &,
         const std::set<types::boundary_id> &);
#endif

      template
        void
        create_boundary_right_hand_side<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension> &,
         const hp::QCollection<deal_II_dimension-1> &,
         const Function<deal_II_dimension>   &,
         Vector<double>                      &,
         const std::set<types::boundary_id> &);





#if deal_II_dimension > 1
      template
        void project_boundary_values<deal_II_dimension>
        (const Mapping<deal_II_dimension>     &,
         const DoFHandler<deal_II_dimension>  &,
         const FunctionMap<deal_II_dimension>::type &,
         const Quadrature<deal_II_dimension-1>&,
         std::map<types::global_dof_index,double>&, std::vector<unsigned int>);
#endif

      template
        void project_boundary_values<deal_II_dimension>
        (const DoFHandler<deal_II_dimension>  &,
         const FunctionMap<deal_II_dimension>::type &,
         const Quadrature<deal_II_dimension-1>&,
         std::map<types::global_dof_index,double>&, std::vector<unsigned int>);


      template
        void project_boundary_values<deal_II_dimension>
        (const Mapping<deal_II_dimension>     &,
         const DoFHandler<deal_II_dimension>  &,
         const FunctionMap<deal_II_dimension>::type &,
         const Quadrature<deal_II_dimension-1>&,
         ConstraintMatrix&, std::vector<unsigned int>);

      template
        void project_boundary_values<deal_II_dimension>
        (const DoFHandler<deal_II_dimension>  &,
         const FunctionMap<deal_II_dimension>::type &,
         const Quadrature<deal_II_dimension-1>&,
         ConstraintMatrix&, std::vector<unsigned int>);


#if deal_II_dimension != 1
      template
        void project_boundary_values_curl_conforming<deal_II_dimension>
        (const DoFHandler<deal_II_dimension>&,
         const unsigned int,
         const Function<deal_II_dimension>&,
         const types::boundary_id,
         ConstraintMatrix&,
         const Mapping<deal_II_dimension>&);
      template
        void project_boundary_values_curl_conforming<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension>&,
         const unsigned int,
         const Function<deal_II_dimension>&,
         const types::boundary_id,
         ConstraintMatrix&,
         const hp::MappingCollection<deal_II_dimension>&);
      template
        void project_boundary_values_div_conforming<deal_II_dimension>
        (const DoFHandler<deal_II_dimension>&,
         const unsigned int,
         const Function<deal_II_dimension>&,
         const types::boundary_id,
         ConstraintMatrix&,
         const Mapping<deal_II_dimension>&);
      template
        void project_boundary_values_div_conforming<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension>&,
         const unsigned int,
         const Function<deal_II_dimension>&,
         const types::boundary_id,
         ConstraintMatrix&,
         const hp::MappingCollection<deal_II_dimension>&);
      template
        void
        compute_no_normal_flux_constraints (const DoFHandler<deal_II_dimension> &dof_handler,
                                            const unsigned int     first_vector_component,
                                            const std::set<types::boundary_id> &boundary_ids,
                                            ConstraintMatrix      &constraints,
                                            const Mapping<deal_II_dimension>    &mapping);
      template
        void
        compute_no_normal_flux_constraints (const hp::DoFHandler<deal_II_dimension> &dof_handler,
                                            const unsigned int     first_vector_component,
                                            const std::set<types::boundary_id> &boundary_ids,
                                            ConstraintMatrix      &constraints,
                                            const Mapping<deal_II_dimension>    &mapping);
#endif
      \}
#endif
  }



for (deal_II_dimension : DIMENSIONS)
{
  namespace VectorTools \{

  template
    void interpolate_to_different_mesh
    (const DoFHandler<deal_II_dimension> &,
     const Vector<float>                 &,
     const DoFHandler<deal_II_dimension> &,
     Vector<float>                       &);

  template
    void interpolate_to_different_mesh
    (const DoFHandler<deal_II_dimension> &,
     const Vector<float>                 &,
     const DoFHandler<deal_II_dimension> &,
     const ConstraintMatrix              &,
     Vector<float>                       &);

  template
    void interpolate_to_different_mesh
    (const InterGridMap<DoFHandler<deal_II_dimension> > &,
     const Vector<float>                                &,
     const ConstraintMatrix                             &,
     Vector<float>                                      &);

  template
    void interpolate_to_different_mesh
    (const DoFHandler<deal_II_dimension> &,
     const Vector<double>                &,
     const DoFHandler<deal_II_dimension> &,
     Vector<double>                      &);

  template
    void interpolate_to_different_mesh
    (const DoFHandler<deal_II_dimension> &,
     const Vector<double>                &,
     const DoFHandler<deal_II_dimension> &,
     const ConstraintMatrix              &,
     Vector<double>                      &);

  template
    void interpolate_to_different_mesh
    (const InterGridMap<DoFHandler<deal_II_dimension> > &,
     const Vector<double>                               &,
     const ConstraintMatrix                             &,
     Vector<double>                                     &);

  \}
}



// ---------------------------------------------------------------------
//
// Copyright (C) 1998 - 2022 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------

#ifndef DOXYGEN

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#  if deal_II_dimension <= deal_II_space_dimension
    template class FEValues<deal_II_dimension, deal_II_space_dimension>;

    template class FEFaceValuesBase<deal_II_dimension, deal_II_space_dimension>;
    template class FEFaceValues<deal_II_dimension, deal_II_space_dimension>;
    template class FESubfaceValues<deal_II_dimension, deal_II_space_dimension>;

    namespace internal
    \{
      namespace FEValuesImplementation
      \{
        template class FiniteElementRelatedData<deal_II_dimension, deal_II_space_dimension>;
      \}
    \}
#  endif
  }


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS; lda : BOOL)
  {
#  if deal_II_dimension <= deal_II_space_dimension
    template void FEValues<deal_II_dimension, deal_II_space_dimension>::reinit(
      const TriaIterator<DoFCellAccessor<deal_II_dimension, deal_II_space_dimension, lda>> &);
    template void FEFaceValues<deal_II_dimension, deal_II_space_dimension>::reinit(
      const TriaIterator<DoFCellAccessor<deal_II_dimension, deal_II_space_dimension, lda>> &, unsigned int);

    template void FEFaceValues<deal_II_dimension, deal_II_space_dimension>::reinit(
      const TriaIterator<DoFCellAccessor<deal_II_dimension, deal_II_space_dimension, lda>> &,
      const TriaIterator<TriaAccessor<deal_II_dimension - 1, deal_II_dimension, deal_II_space_dimension>> &);

    template void FESubfaceValues<deal_II_dimension, deal_II_space_dimension>::reinit(
      const TriaIterator<DoFCellAccessor<deal_II_dimension, deal_II_space_dimension, lda>> &,
      const unsigned int,
      const unsigned int);

    template void FESubfaceValues<deal_II_dimension, deal_II_space_dimension>::reinit(
      const TriaIterator<DoFCellAccessor<deal_II_dimension, deal_II_space_dimension, lda>> &,
      const TriaIterator<TriaAccessor<deal_II_dimension - 1, deal_II_dimension, deal_II_space_dimension>> &,
      const TriaIterator<TriaAccessor<deal_II_dimension - 1, deal_II_dimension, deal_II_space_dimension>> &);
#  endif
  }
#endif

// ---------------------------------------------------------------------
//
// Copyright (C) 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------



for (S : MPI_SCALARS)
  {
    namespace PETScWrappers
    \{
      template void
      CommunicationPattern::export_to_ghosted_array(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      CommunicationPattern::export_to_ghosted_array_start(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      CommunicationPattern::export_to_ghosted_array_finish(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      CommunicationPattern::import_from_ghosted_array(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      CommunicationPattern::import_from_ghosted_array_start(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      CommunicationPattern::import_from_ghosted_array_finish(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      Partitioner::export_to_ghosted_array(const ArrayView<const S> &src,
                                           const ArrayView<S>       &dst) const;

      template void
      Partitioner::export_to_ghosted_array_start(const ArrayView<const S> &src,
                                                 const ArrayView<S> &dst) const;

      template void
      Partitioner::export_to_ghosted_array_finish(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      Partitioner::import_from_ghosted_array(const VectorOperation::values op,
                                             const ArrayView<const S>     &src,
                                             const ArrayView<S> &dst) const;

      template void
      Partitioner::import_from_ghosted_array_start(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      Partitioner::import_from_ghosted_array_finish(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;
    \}
  }

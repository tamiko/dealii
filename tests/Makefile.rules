######################################################################
# Makefile.rules,v 1.11 2001/04/24 13:18:09 wolf Exp
#
# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, the deal.II authors
#
# Common make rules for test files. To be included by the Makefiles
# in the subdirectories.
######################################################################


# reference the normalization script in the tests directory, which is
# one up from where the variable will be expanded
normalize = $(shell cd .. && pwd)/normalize.pl

verbose = off

# The mail program. Override this by something like
#
# MAIL=mymailprog
#
# as part of the 'make' arguments or in the environment to use a different
# mail agent or to tunnel through ssh.  The mail program takes a single
# argument, which is the mail address for tests The contents of the mail will
# be provided on STDIN
MAIL ?= mail

# this lets you overwrite the diff tool for comparisons.
# recommended environment setting:
#   export DEAL_II_DIFF="numdiff -a 1e-6 -q -s ' \t\n:'"
DEAL_II_DIFF ?= diff

PLATFORM = $(TARGET)+$(GXX-VERSION:intel_%=%)
PLATFORM-HIERARCHY = $(shell $(PERL) ../hierarchy.pl $(PLATFORM))

ID = `id -un`"@"`hostname`

############################################################
# First how to create object files, including all necessary
# flags. Before we start the compilation, write the status
# of the next operation into the test/status file. If these
# are MPI tests, also remove all status files from the
# test/ncpus_*/ directories
############################################################

flags     = $(CXXFLAGS.g)

ifeq ($(findstring gcc,$(GXX_VERSION)),gcc)
flags += -Wno-missing-noreturn
endif

%/obj.g.$(OBJEXT) : %.cc
	@echo =====debug========= $<
	@echo Compiling > $(dir $@)/status
	@-rm -f $(dir $@)/ncpu*/status
	@$(CXX) $(flags) -c $< -o $@

%/obj.$(OBJEXT) : %.cc
	@echo =====optimized===== $<
	@echo Compiling > $(dir $@)/status
	@-rm -f $(dir $@)/ncpu*/status
	@$(CXX) $(CXXFLAGS.o) -c $< -o $@

######################################################################
# Don't put $(libraries) into this line since it is already in $^
######################################################################
%/exe : %/obj.g.$(OBJEXT)
	@echo =====linking======= $@
	@echo Linking > $(dir $@)/status
	@$(CXX) -o $@ $^ $(LDFLAGS) $(LIBS)


############################################################
# Next how to create output: by simply running a program.
# Note that we normalize output to a few digits after
# the decimal punct, in order to be able to check across
# different platforms where we might differ in round-off etc.
#
# Since the test suite is usually run automatically, we
# impose a maximum run time of 30 CPU minutes for each
# program.
#
# In the line after we execute the program, we make sure that
# the program terminated without error code; otherwise delete
# the output file and stop the make command. This is done so
# that when you run make for that output file again later
# then make would not say that the output file is up to
# date and does not need to be regenerated
############################################################

ifndef OVERRIDE_OUTPUT_RULE
%/output : %/exe
	@echo =====Running======= $<
	@echo Running > $(dir $@)/status
	@$(ULIMIT) -t $(if $(ULIMIT_LIMIT),$(ULIMIT_LIMIT),600) ; \
	  export WALLTIME=3600 ; \
	  ./$< ; \
	  if test ! $$? = 0 ; then rm $@ ; false ; fi
	@perl -pi $(normalize)  $@
endif


############################################################
# Postprocessing the output: compare with precomputed
# files. In default mode, do not show diffs as they are
# usually overly verbose. Only if user calls `make' with
# flag `verbose=on' show the diffs. Also note that we
# usually let the call to `make' continue even if we
# find a difference, since the output is clearly marked
# as a failing test and we normally want to see the results
# of all tests at once, including those that come after
# the failed one.
#
# if, however, the flag `stop_on_error=on' was given, the
# check command fails whenever the output differs from the
# precomputed file.
#
# as to finding which output file to compare with: we simply
# walk the list of files created by the ./hierarchy.pl file
# and take the first one.
############################################################


%/OK : %/output
	@echo '=====Checking======' $<
	@echo Checking > $(dir $@)/status
	@$(PERL) -pi $(normalize)  $<
	@for i in $(PLATFORM-HIERARCHY) ; do \
	    testname=$(<:%/output=%) ; \
	    if test -f $$testname/cmp/$$i ; then \
		cmpfile_found=yes ; \
		if test "x$(verbose)" = "xon" ; then \
			cmd="$(DEAL_II_DIFF) $(DIFFOPT) $< $$testname/cmp/$$i" ; \
		 else \
			cmd="$(DEAL_II_DIFF) $< $$testname/cmp/$$i > /dev/null" ; \
		 fi ; \
		 if eval $$cmd ; then \
			echo '=====OK============' $@ ; \
			echo 'diff ok' > $(dir $@)/status ; \
			echo $$i > $@ ; \
		 else \
			if test "x$(verbose)" = "xon" ; then \
				echo '+++++Error+++++++++' $@ " ($$testname/cmp/$$i)" ; \
			else \
				echo '+++++Error+++++++++' $@ "($$testname/cmp/$$i) Use make verbose=on for the diffs" ; \
			fi ; \
			if test "x$(stop_on_error)" = "xon" ; then \
				exit 1 ; \
			fi ; \
		 fi ; \
		 break ; \
	    fi ; \
	  done && \
	  if test "x$$cmpfile_found" != "xyes" ; then \
		echo "*** No suitable file in $$testname/cmp found! ***" ; \
		false ; \
	  fi

default: run-tests

############################################################
# Generate a report for the present date, in which the
# results (indicated by a "+" for a successful test, and a
# "-" for a failing one) for all tests is summarized. Use
# universal time in order to be able to run this target
# anywhere anytime
#
# in the mpi directory, we may find the situation that a
# test did not compile. in that case, there is no 'status'
# file in the xx/ncpu_4/ directory, but one in xx/ (because
# we never made it to the stage where we run things in
# parallel). If that is the case, then try to find the other
# file
############################################################
report:
	@-$(MAKE) -k run-tests
	@-svn info . | grep '^Revision'
	@echo 'Date: ' `date -u +"%Y %j  %F  %U-%w"`
	@echo 'Id: ' $(ID)
	@for test in $(sort $(tests)) ; do \
	  case $$test in \
            *ncpu_*) \
	        if test -f $$test/status ; then \
                  file=$$test/status ; \
                else \
		  file=`echo $$test | $(PERL) -pi -e 's/ncpu_\d+//g;'`/status ; \
		fi ; \
		;; \
	    *) \
		file=$$test/status ; \
		;; \
	  esac ; \
	  echo `date -u +"%Y-%m-%d %H:%M"` \
               "`perl ../status_to_report.pl $$file`" \
               "`echo $(WORKDIR)/$$test | sed s#/ncpu#---ncpu#g`" ; \
	done


status=Compiling Linking Running Checking diff all

summary:
	@for curstatus in $(status) ; do \
	  counter=0 ; \
	  all=0 ; \
	  for test in $(sort $(tests)) ; do \
	     case $$test in \
               *ncpu_*) \
	         if test -f $$test/status ; then \
                   file=$$test/status ; \
                 else \
		   file=`echo $$test | $(PERL) -pi -e 's/ncpu_\d+//g;'`/status ; \
		fi ; \
		;; \
	    *) \
		file=$$test/status ; \
		;; \
	  esac ; \
	  curcount=`if test -f $$file ; then grep -c $$curstatus $$file;else echo 0;fi;`; \
	  all=$$(($$all+1));\
	  counter=$$(($$counter+$$curcount)); \
	done; \
	if test "$$curstatus" = "all"; then printf "%s\t" $$all; \
	else if test "$$curstatus" = "diff"; then printf "%s\t" $$counter; \
	else if test "$$counter" != "0"; then printf "%s\t" $$counter; \
	else printf "%s\t" $$counter ; fi;fi;fi;\
	done;\
	printf "\n";

report+mail:
	@$(MAKE) report | tee testresults
	@cat testresults | $(MAIL) dealii.regression.tests@gmail.com
	@rm testresults

######################################################################
# Update a reference file
######################################################################
%/update: %/output
	  @../try_replace.sh $(@D)


############################################################
# Generating references: Useful when creating references for
# a new platform or when updating several non-generic
# references.
############################################################
%/ref : %/output
	@$(PERL) -pi $(normalize)  $<
	@for i in $(PLATFORM-HIERARCHY) ; do \
	    testname=$(<:%/output=%) ; \
	    if test -f $$testname/cmp/$$i ; then \
	        cmd="diff $< $$testname/cmp/$$i > /dev/null" ; \
		if eval ! $$cmd ; then \
		    echo '=====Creating======' $$testname/cmp/$(PLATFORM) ; \
		    cp $$testname/output $$testname/cmp/$(PLATFORM); \
		fi ; \
		break ; \
	    fi ; \
	  done

############################################################
# all .cc-files are tests by default. After that, find out which tests
# require unconfigured prerequisites and eliminate those.
# We first test if $tests exists and in this case do not do anything.
ifeq ($(tests),)
  tests_all = $(wildcard *.cc)
  ifeq ($(USE_CONTRIB_PETSC),no)
    tests1 = $(foreach file, $(tests_all), $(shell grep -L PETScWrappers $(file)))
  else
    tests1 = $(tests_all)
  endif

  ifeq ($(USE_CONTRIB_TRILINOS),no)
    tests2 = $(foreach file, $(tests1), $(shell grep -L TrilinosWrappers $(file)))
  else
    tests2 = $(tests1)
  endif

  tests_cc = $(tests2)
  tests = $(basename $(tests2))
endif

############################################################
# link with all libraries:
libraries = $(lib-deal2.g)
libraries_o = $(lib-deal2.o)

############################################################
# After all these general rules, here is the target to be
# executed by make: for each entry in the list $(tests)
# perform a check.
############################################################
run-tests: $(tests:%=%/OK)

output: $(tests:%=%/output)

build: $(tests:%=%/exe)

refs: $(tests:%=%/ref)

update: $(tests:%=%/update)

############################################################
# Cleanup targets
############################################################

clean:
	-rm -f Makefile.depend Makefile.*tests */obj.$(OBJEXT) \
		*/obj.g.$(OBJEXT) */output *~ */*.vtu */*.pvtu */*visit \
		*/status */*/OK */OK \
		*/ncpu*/status

distclean: clean
	-rm -f */exe *.testcase *.gpl *.eps *.gnuplot


show-tests:
	@echo $(tests)

############################################################
# Automatic generation of dependencies
############################################################

Makefile.depend: $(shell echo *.cc)
	@echo =====Dependencies== $@
	@$D/common/scripts/make_dependencies $(INCLUDE) $^ > $@ \
		|| (rm -f $@ ; false)
	@$(PERL) -pi -e 's#\.((g\.)?$(OBJEXT):)#/obj.\1#g;' $@

Makefile.tests: Makefile $(shell echo *.cc)
	@echo =====Targets======= $@
	@for i in $(tests) ; do \
		echo "$$i/exe : $$i/obj.g.\$$(OBJEXT) \$$(libraries)"; \
	 done \
		> $@


.PHONY: report show-tests clean distclean summary %/ref
